package binaryTree;

import java.util.Scanner;

public class BinaryTreeUse {
	
	
	public static void printTree(BinaryTreeNode<Integer> root) {
		if(root==null) {
			return;
		}
		System.out.print(root.data + " ");
		printTree(root.left);
		printTree(root.right);
	}
	public static void printTree2(BinaryTreeNode<Integer> root) {
		if(root==null) {
			return ;
		}
		
		System.out.print(root.data + " : ");
		if(root.left!=null) {
			System.out.print("L" + root.left.data + " ");
		}
		if(root.right!=null) {
			if(root.left!=null) {
				System.out.print(", R" + root.right.data);
			}else {
				System.out.print("R"+root.right.data);
			}
		}
		System.out.println();
		printTree2(root.left);
		printTree2(root.right);
	}
	
	public static BinaryTreeNode<Integer> takeTreeInput(){
		System.out.println("Enter root data");
		Scanner s = new Scanner(System.in);
		int rootData = s.nextInt();
		if(rootData==-1) {
			return null;
		}
		BinaryTreeNode<Integer> root = new BinaryTreeNode<>(rootData);
		root.left=takeTreeInput();
		root.right=takeTreeInput();
		return root;
	}

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(1);
		BinaryTreeNode<Integer> rleft = new BinaryTreeNode<Integer>(2);
		BinaryTreeNode<Integer> rright = new BinaryTreeNode<Integer>(3);
		root.left = rleft;
		root.right = rright;
		BinaryTreeNode<Integer> twoRight = new BinaryTreeNode<Integer>(4);
		BinaryTreeNode<Integer> threeLeft = new BinaryTreeNode<Integer>(5);
		rleft.right = twoRight;
		rright.left = threeLeft;
		printTree2(root);
		

	}

}
